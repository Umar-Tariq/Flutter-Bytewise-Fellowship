Widgets:
Widgets are the central class hierarchy in the Flutter framework. A widget is an immutable description of part of a user interface. Widgets can be inflated into elements, which manage the underlying render tree.

Why do we need widgets in Flutter?
The basic idea behind using the widgets is that programmers can easily create UI from them. Widgets describe how the UI of the application would look like on the given state and configuration. 

runApp() 
The runApp() function takes the given widget and makes it the root of the widget tree.

Text:
This widget is used to write something in your application.

Row, Column:
These widgets used to create flexible layouts in both horizontal and vertical direction. They are multi child layout widgets.

Stack:
Instead of being linearly oriented (either horizontally or vertically), a Stack widget lets you place widgets on top of each other in paint order. You can then use the Positioned widget on children of a Stack to position them relative to the top, right, bottom, or left edge of the stack. 

Container:
The Container widget lets you create a rectangular visual element. A container can be decorated with a BoxDecoration , such as a background, a border, or a shadow. A Container can also have margins, padding, and constraints applied to its size.

MaterialApp:
Many Material Design widgets need to be inside of a MaterialApp to display properly, in order to inherit theme data. Therefore, run the application with a MaterialApp.

MyAppBar:
The MyAppBar widget creates a Container with a height of 56 device-independent pixels with an internal padding of 8 pixels, both on the left and the right. Inside the container, MyAppBar uses a Row layout to organize its children. The middle child, the title widget, is marked as Expanded, which means it expands to fill any remaining available space that hasn’t been consumed by the other children.

MyScaffold
The MyScaffold widget organizes its children in a vertical column. At the top of the column, it places an instance of MyAppBar, passing the app bar a Text widget to use as its title. Passing widgets as arguments to other widgets is a powerful technique that lets you create generic widgets that can be reused in a wide variety of ways. Finally, MyScaffold uses an Expanded to fill the remaining space with its body, which consists of a centered message.

Gesture Detector:
The GestureDector widget doesn’t have a visual representation but instead detects gestures made by the user. When the user taps the Container, the GestureDector   calls its onTap() callback, in this case printing a message to the console. You can use GestureDector to detect a variety of input gestures, including taps, drags, and scales.

Expanded:
Expanded widget in flutter comes in handy when we want a child widget or children widgets to take all the available space along the main axis (for Row the main axis is horizontal & vertical for Column).

Circle Avatar: 
CircleAvatar widget comes built-in with the flutter SDK. It is simply a circle in which we can add background color, background image, or just some text.

Text fields
Text fields allow users to type text into an app. They are used to build forms, send messages, create search experiences, and more.

Stateless
The state of the widget cannot change overtime.

Stateful:
The state of the widget can change overtime.
